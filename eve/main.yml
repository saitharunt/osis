---
version: '0.2'

branches:
  default:
    stage: pre-merge

models:
  - env: &coverage
      CODECOV_TOKEN: '%(secret:codecov_token)s'
      VCS_COMMIT_ID: '%(prop:revision)s'
      VCS_BRANCH_NAME: '%(prop:branch)s'
      CI_BUILD_ID: '%(prop:bootstrap)s'
  - env: &docker_env
      DEVELOPMENT_DOCKER_IMAGE_NAME: 'registry.scality.com/%(prop:git_slug)s-dev/%(prop:git_slug)s'
      PRODUCTION_DOCKER_IMAGE_NAME: 'registry.scality.com/%(prop:git_slug)s/%(prop:git_slug)s'
  - ShellCommand: &docker_login
      name: Login to docker registry
      command: docker login -u "${HARBOR_LOGIN}" -p "${HARBOR_PASSWORD}" registry.scality.com
      usePTY: true
      env:
        HARBOR_LOGIN: '%(secret:harbor_login)s'
        HARBOR_PASSWORD: '%(secret:harbor_password)s'
  - ShellCommand: &wait_docker_daemon
      name: Wait for Docker daemon to be ready
      command: |
        bash -c '
        for i in {1..150}
        do
          docker info &> /dev/null && exit
          sleep 2
        done
        echo "Could not reach Docker daemon from buildbot worker" >&2
        exit 1'
      haltOnFailure: true

stages:
  pre-merge:
    worker:
      type: kube_pod
      path: eve/workers/build/pod.yaml
      images:
        build: eve/workers/build
    steps:
      - Git: &git_pull
          name: git pull
          repourl: "%(prop:git_reference)s"
          shallow: true
          retryFetch: true
          haltOnFailure: true
      - ShellCommand:
          name: gradle build
          command: gradle build
          haltOnFailure: true
      - ShellCommand:
          name: Copy secret key ring file
          command: echo "%(secret:signing_secret_key_ring_file)s" | base64 --decode > secring.gpg
      - ShellCommand:
          name: gradle upload artifact
          command: gradle uploadArchives -Psigning.secretKeyRingFile=$SECRET_FILE -PnexusUsername=$NEXUS_UNAME -PnexusPassword=$NEXUS_PWD -Psigning.keyId=$SIGNING_KEYID -Psigning.password=$SIGNING_PWD
          haltOnFailure: true
          env:
            SECRET_FILE: '%(prop:builddir)s/build/secring.gpg'
            NEXUS_UNAME: '%(secret:nexus_username)s'
            NEXUS_PWD: '%(secret:nexus_password)s'
            SIGNING_KEYID: '%(secret:signing_key_id)s'
            SIGNING_PWD: '%(secret:signing_password)s'
      - ShellCommand:
          name: upload test coverage
          haltOnFailure: False
          command: "curl -s https://codecov.io/bash | bash"
          env:
            <<: *coverage
      - Upload:
          name: Upload reports
          source: 'reports'
          urls:
            - 'pmd-lint/*.html' # this will create links to every .html files
            - 'spotbugs/*.html'
            - 'code-coverage/*.html'
      - TriggerStages:
          stage_names:
            - docker-build
  docker-build:
    worker: &docker_worker
      type: kube_pod
      path: eve/workers/docker/pod.yaml
      images:
        worker: eve/workers/docker
    steps:
      - Git: *git_pull
      - ShellCommand: *wait_docker_daemon
      - ShellCommand: *docker_login
      - ShellCommand:
          name: docker build
          command: >-
            docker build .
            --tag=${DEVELOPMENT_DOCKER_IMAGE_NAME}:%(prop:commit_short_revision)s
          env: *docker_env
          haltOnFailure: true
      - ShellCommand:
          name: push docker image into the development namespace
          command: docker push ${DEVELOPMENT_DOCKER_IMAGE_NAME}
          env: *docker_env
          haltOnFailure: true
  release:
    worker:
      type: local
    steps:
      - TriggerStages:
          stage_names:
            - docker-release
  docker-release:
    worker: *docker_worker
    steps:
      - Git: *git_pull
      - ShellCommand: *wait_docker_daemon
      - ShellCommand: *docker_login
      - EvePropertyFromCommand:
          name: get tag short revision
          property: tag_revision
          command: |
            git checkout refs/tags/%(prop:tag)s 2&> /dev/null
            git rev-parse --short HEAD
          haltOnFailure: true
      - ShellCommand:
          name: publish docker image to Scality Production OCI registry
          command: |
            docker pull ${DEVELOPMENT_DOCKER_IMAGE_NAME}:%(prop:tag_revision)s
            docker tag ${DEVELOPMENT_DOCKER_IMAGE_NAME}:%(prop:tag_revision)s ${PRODUCTION_DOCKER_IMAGE_NAME}:%(prop:tag)s
            docker push ${PRODUCTION_DOCKER_IMAGE_NAME}:%(prop:tag)s
          env: *docker_env
          haltOnFailure: true
