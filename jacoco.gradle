apply plugin: "jacoco"
jacoco {
    toolVersion = "0.8.5"
}

test {
    jacoco {
        excludes = []
    }
        finalizedBy jacocoTestCoverageVerification // code coverage is verified after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/reports/code-coverage")
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    /*excluding original osis stub code*/
                    "**/com/vmware/osis/resource/*.*",
                    "**/com/vmware/osis/model/**/*.*",
                    "**/com/vmware/osis/annotation/*.*",
                    "**/com/vmware/osis/security/**/*.*",
                    "**/com/vmware/osis/service/*.*",
                    "**/com/vmware/osis/validation/*.*",
                    "**/com/vmware/osis/Application.java",
                    "**/com/vmware/osis/scality/configuration/*.*",
                    "**/com/vmware/osis/scality/security/*.*",
                    "**/com/vmware/osis/scality/*.*"
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    /*excluding original osis stub code*/
                    "**/com/vmware/osis/resource/*.*",
                    "**/com/vmware/osis/model/**/*.*",
                    "**/com/vmware/osis/annotation/*.*",
                    "**/com/vmware/osis/security/**/*.*",
                    "**/com/vmware/osis/service/*.*",
                    "**/com/vmware/osis/validation/*.*",
                    "**/com/vmware/osis/Application.java",
                    "**/com/vmware/osis/scality/configuration/*.*",
                    "**/com/vmware/osis/scality/security/*.*",
                    "**/com/vmware/osis/scality/*.*"
            ])
        }))
    }
    violationRules {
        rule {
            limit {
                minimum = 0.40 // verifying mandatory code coverage of 80%
            }
        }
        rule {
            element = 'METHOD'
            excludes = [
            ]
        }
    }
}
//
//// aggregates jacoco results from all subprojects and core project and generate a report
//task jacocoRootTestReport(type: JacocoReport) {
//
//    sourceSets sourceSets.main
//
//    def jacocoTestFiles = ["$buildDir/jacoco/test.exec"]
//    subprojects.each { p ->
//        def coverageFileLocation = "$p.buildDir/jacoco/test.exec"
//        if (new File(coverageFileLocation).exists()) {
//            jacocoTestFiles << coverageFileLocation
//        }
//    }
//
//    logger.info('Aggregating next JaCoCo Coverage Files: {}', jacocoTestFiles)
//    executionData files(jacocoTestFiles)
//
//    reports {
//        xml.enabled false
//        csv.enabled false
//        html.enabled true
//        html.destination file("${rootDir}/reports/code-coverage")
//    }
//}
check.dependsOn('jacocoTestReport')
